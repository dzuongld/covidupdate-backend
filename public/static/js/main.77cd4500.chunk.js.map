{"version":3,"sources":["components/Loader.js","contexts/DataContext.js","App.js","serviceWorker.js","index.js"],"names":["Loader","style","minHeight","display","alignSelf","justifySelf","src","alt","width","textAlign","Context","React","createContext","DataContext","state","data","loading","fetch","process","then","response","json","setState","catch","error","console","log","this","Provider","value","props","children","Component","Home","lazy","NavBar","Map","App","fallback","className","path","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6GAAA,oBA0BeA,IAxBA,WAUX,OACI,yBAAKC,MAVM,CACXC,UAAW,OACXC,QAAS,SASL,yBAAKF,MAPC,CACVG,UAAW,SACXC,YAAa,WAML,yBACIC,IAAI,4DACJC,IAAI,SACJC,MAAM,QAEV,wBAAIP,MAAO,CAAEQ,UAAW,WAAxB,kB,oICjBVC,EAAUC,IAAMC,cAAc,IAEvBC,EAAb,2MACIC,MAAQ,CAAEC,KAAM,GAAIC,SAAS,GADjC,mFAGyB,IAAD,OAChBC,MAAM,GAAD,OAAIC,wCAAJ,UACAC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACJ,GACH,EAAKO,SAAS,CAAEP,KAAMA,EAAMC,SAAS,OAExCO,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAZ5B,+BAiBQ,OAAIG,KAAKb,MAAME,QAAgB,kBAAC,IAAD,MAE3B,kBAACN,EAAQkB,SAAT,CAAkBC,MAAOF,KAAKb,OACzBa,KAAKG,MAAMC,cApB5B,GAAiCpB,IAAMqB,WA0BxBtB,O,0QCpBTuB,EAAOtB,IAAMuB,MAAK,kBAAM,sDACxBC,EAASxB,IAAMuB,MAAK,kBAAM,gCAC1BE,EAAMzB,IAAMuB,MAAK,kBAAM,sDAqCdG,E,iLAjCP,OACI,6BACI,kBAACxB,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CACIyB,SACI,6BACI,kBAACtC,EAAA,EAAD,QAIR,kBAACmC,EAAD,MACA,yBAAKI,UAAU,aACX,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACjB,kBAACR,EAAD,OAEJ,kBAAC,IAAD,CAAOO,KAAK,QACR,kBAACJ,EAAD,OAEJ,kBAAC,IAAD,CAAUM,GAAG,MAAgB,c,GAvB/C/B,IAAMqB,WCHJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiC,c","file":"static/js/main.77cd4500.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loader = () => {\r\n    const parent = {\r\n        minHeight: '90vh',\r\n        display: 'grid'\r\n    }\r\n    const child = {\r\n        alignSelf: 'center',\r\n        justifySelf: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={parent}>\r\n            <div style={child}>\r\n                <img\r\n                    src=\"https://media.giphy.com/media/l4FGDT7FZkvojdKMw/giphy.gif\"\r\n                    alt=\"Loader\"\r\n                    width=\"300\"\r\n                />\r\n                <h5 style={{ textAlign: 'center' }}>LOADING...</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport Loader from '../components/Loader'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport class DataContext extends React.Component {\r\n    state = { data: {}, loading: true }\r\n\r\n    componentDidMount() {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/data`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                this.setState({ data: data, loading: false })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) return <Loader />\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Context\r\n","import React, { Suspense } from 'react'\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\n\nimport './App.css'\n// import Home from './components/Home'\n// import Map from './components/Map'\n// import NavBar from './components/NavBar'\nimport { DataContext } from './contexts/DataContext'\nimport Loader from './components/Loader'\n\n// lazy loading - downloaded on the fly\nconst Home = React.lazy(() => import('./components/Home'))\nconst NavBar = React.lazy(() => import('./components/NavBar'))\nconst Map = React.lazy(() => import('./components/Map'))\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <DataContext>\n                    <BrowserRouter>\n                        <Suspense\n                            fallback={\n                                <div>\n                                    <Loader />\n                                </div>\n                            }\n                        >\n                            <NavBar />\n                            <div className=\"container\">\n                                <Switch>\n                                    {/* stop when found a match */}\n                                    <Route path=\"/\" exact>\n                                        <Home />\n                                    </Route>\n                                    <Route path=\"/map\">\n                                        <Map />\n                                    </Route>\n                                    <Redirect to=\"/\"></Redirect>{' '}\n                                    {/* fall back */}\n                                </Switch>\n                            </div>\n                        </Suspense>\n                    </BrowserRouter>\n                </DataContext>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}