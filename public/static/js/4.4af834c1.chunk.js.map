{"version":3,"sources":["utils/fields.js","components/List.js","components/Overview.js","components/Home.js"],"names":["COUNTRY","STATE","LAST_UPDATE","CONFIRMED","DEATHS","RECOVERED","LATITUDE","LONGITUDE","NEW_CASES","getDataByPage","data","page","end","start","slice","List","props","context","sortData","event","index","parseInt","target","value","newData","state","sort","a","b","setState","currentPage","dataDisplayed","totalPages","currentCountry","country","groupByCountry","selectedCountry","list","dataDup","key","covidData","countryName","fields","Confirmed","Deaths","Recovered","NewCases","push","confirmed","deaths","recovered","newCases","transformData","this","newTotalPages","Math","ceil","length","updateData","goBack","className","htmlFor","id","onChange","defaultValue","disabled","map","entry","numeral","format","type","onClick","toPage","React","Component","contextType","DataContext","Overview","date","moment","allRecords","totalCount","deathCount","recoveredCount","newCount","countries","record","Object","keys","processData","countryCount","style","fontSize","href","Home"],"mappings":"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","file":"static/js/4.4af834c1.chunk.js","sourcesContent":["export default {\r\n    COUNTRY: 'Country/Region',\r\n    STATE: 'Province/State',\r\n    LAST_UPDATE: 'Last Update',\r\n    CONFIRMED: 'Confirmed',\r\n    DEATHS: 'Deaths',\r\n    RECOVERED: 'Recovered',\r\n    LATITUDE: 'Latitude',\r\n    LONGITUDE: 'Longitude',\r\n    NEW_CASES: 'NewCases'\r\n}\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport fields from '../utils/fields'\r\nimport DataContext from '../contexts/DataContext'\r\n\r\nconst transformData = (data, groupByCountry, selectedCountry) => {\r\n    // console.log(data)\r\n    const list = []\r\n    const dataDup = {}\r\n\r\n    if (groupByCountry) {\r\n        for (const key in data.covidData) {\r\n            const country = data.covidData[key]\r\n            const countryName = country[fields.COUNTRY]\r\n            if (dataDup[countryName]) {\r\n                dataDup[countryName][fields.CONFIRMED] += parseInt(\r\n                    country[fields.CONFIRMED]\r\n                )\r\n                dataDup[countryName][fields.DEATHS] += parseInt(\r\n                    country[fields.DEATHS]\r\n                )\r\n                dataDup[countryName][fields.RECOVERED] += parseInt(\r\n                    country[fields.RECOVERED]\r\n                )\r\n                dataDup[countryName][fields.NEW_CASES] += parseInt(\r\n                    country[fields.NEW_CASES]\r\n                )\r\n            } else {\r\n                dataDup[countryName] = {}\r\n                dataDup[countryName][fields.CONFIRMED] = parseInt(\r\n                    country[fields.CONFIRMED]\r\n                )\r\n                dataDup[countryName][fields.DEATHS] = parseInt(\r\n                    country[fields.DEATHS]\r\n                )\r\n                dataDup[countryName][fields.RECOVERED] = parseInt(\r\n                    country[fields.RECOVERED]\r\n                )\r\n                dataDup[countryName][fields.NEW_CASES] = parseInt(\r\n                    country[fields.NEW_CASES]\r\n                )\r\n            }\r\n        }\r\n\r\n        for (const country in dataDup) {\r\n            const { Confirmed, Deaths, Recovered, NewCases } = dataDup[country]\r\n            list.push([country, Confirmed, NewCases, Deaths, Recovered])\r\n        }\r\n    } else {\r\n        for (const key in data.covidData) {\r\n            const country = data.covidData[key]\r\n            const countryName = country[fields.COUNTRY]\r\n            if (countryName === selectedCountry) {\r\n                const state = country[fields.STATE]\r\n                const confirmed = country[fields.CONFIRMED]\r\n                const deaths = country[fields.DEATHS]\r\n                const recovered = country[fields.RECOVERED]\r\n                const newCases = country[fields.NEW_CASES]\r\n                list.push([state, confirmed, newCases, deaths, recovered])\r\n            }\r\n        }\r\n    }\r\n\r\n    return list\r\n}\r\n\r\nconst getDataByPage = (data, page) => {\r\n    const end = page * 10\r\n    const start = end - 10\r\n    return data.slice(start, end)\r\n}\r\n\r\nclass List extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    constructor(props, context) {\r\n        super(props, context)\r\n        this.state = {\r\n            data: [],\r\n            dataDisplayed: [],\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n            currentCountry: this.props.country\r\n        }\r\n    }\r\n\r\n    updateData() {\r\n        const newData = transformData(\r\n            this.context.data,\r\n            this.props.groupByCountry,\r\n            this.props.country\r\n        )\r\n        const newTotalPages = Math.ceil(newData.length / 10)\r\n        this.setState({\r\n            data: newData,\r\n            totalPages: newTotalPages,\r\n            dataDisplayed: getDataByPage(newData, this.state.currentPage),\r\n            currentCountry: this.props.country\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.data.length === 0) this.updateData()\r\n    }\r\n\r\n    // refresh list only when country is changed\r\n    componentDidUpdate() {\r\n        if (this.props.country !== this.state.currentCountry) this.updateData()\r\n    }\r\n\r\n    // sort by descending order\r\n    sortData = (event) => {\r\n        const index = parseInt(event.target.value)\r\n        const newData = this.state.data.slice()\r\n        newData.sort((a, b) => {\r\n            return b[index] - a[index]\r\n        })\r\n        this.setState({\r\n            data: newData,\r\n            currentPage: 1,\r\n            dataDisplayed: getDataByPage(newData, 1)\r\n        })\r\n    }\r\n\r\n    toPage(goBack) {\r\n        const page = goBack\r\n            ? this.state.currentPage - 1\r\n            : this.state.currentPage + 1\r\n        const newData = getDataByPage(this.state.data, page)\r\n        this.setState({\r\n            dataDisplayed: newData,\r\n            currentPage: page\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.state.currentCountry}</h2>\r\n\r\n                <h4>\r\n                    {this.props.groupByCountry\r\n                        ? 'Countries/Regions'\r\n                        : 'States/Provinces'}\r\n                </h4>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-group mb-3 col-8 col-md-4 col-lg-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\"\r\n                            >\r\n                                Sort By\r\n                            </label>\r\n                        </div>\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id=\"inputGroupSelect01\"\r\n                            onChange={this.sortData}\r\n                            defaultValue=\"\"\r\n                        >\r\n                            <option value=\"\" disabled>\r\n                                --Select One--\r\n                            </option>\r\n                            <option value=\"1\">Total Cases</option>\r\n                            <option value=\"2\">New Cases</option>\r\n                            <option value=\"3\">Deaths</option>\r\n                            <option value=\"4\">Recovered</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>\r\n                                {this.props.groupByCountry\r\n                                    ? 'COUNTRY'\r\n                                    : 'STATE'}\r\n                            </th>\r\n                            <th className=\"text-primary\">TOTAL</th>\r\n                            <th className=\"text-warning\">NEW</th>\r\n                            <th className=\"mobile text-danger\">DEATHS</th>\r\n                            <th className=\"mobile text-success\">RECOVERED</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.dataDisplayed.map((entry, index) => {\r\n                            return (\r\n                                <tr key={entry[0]}>\r\n                                    <td>\r\n                                        {(this.state.currentPage - 1) * 10 +\r\n                                            index +\r\n                                            1}\r\n                                    </td>\r\n                                    <td>{entry[0]}</td>\r\n                                    <td className=\"text-primary\">\r\n                                        {numeral(entry[1]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-warning\">\r\n                                        {numeral(entry[2]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"mobile text-danger\">\r\n                                        {numeral(entry[3]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"mobile text-success\">\r\n                                        {numeral(entry[4]).format('0,0')}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"d-flex justify-content-center p-3\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        disabled={this.state.currentPage === 1}\r\n                        onClick={() => this.toPage(true)}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary ml-1\"\r\n                        disabled={\r\n                            this.state.currentPage === this.state.totalPages\r\n                        }\r\n                        onClick={() => this.toPage(false)}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport numeral from 'numeral'\r\n\r\nimport DataContext from '../contexts/DataContext'\r\nimport fields from '../utils/fields'\r\n\r\nconst processData = (allRecords) => {\r\n    let totalCount = 0\r\n    let deathCount = 0\r\n    let recoveredCount = 0\r\n    let newCount = 0\r\n    let countries = {}\r\n\r\n    for (const key in allRecords) {\r\n        const record = allRecords[key]\r\n        const country = record[fields.COUNTRY]\r\n        if (!countries[country]) countries[country] = 1\r\n        totalCount += parseInt(record[fields.CONFIRMED])\r\n        deathCount += parseInt(record[fields.DEATHS])\r\n        recoveredCount += parseInt(record[fields.RECOVERED])\r\n        newCount += parseInt(record[fields.NEW_CASES])\r\n    }\r\n    const countryCount = Object.keys(countries).length\r\n\r\n    return [totalCount, deathCount, recoveredCount, newCount, countryCount]\r\n}\r\n\r\nclass Overview extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    render() {\r\n        const data = this.context.data\r\n        const date = moment(data.date, 'MM-DD-YYYY').format('DD/MM/YYYY')\r\n        const records = data.covidData\r\n        const [\r\n            totalCount,\r\n            deathCount,\r\n            recoveredCount,\r\n            newCount,\r\n            countryCount\r\n        ] = processData(records)\r\n\r\n        return (\r\n            <div>\r\n                <h2>Overview</h2>\r\n                <p style={{ fontSize: '110%' }}>\r\n                    Last updated on <strong>{date}</strong>. Data is typically\r\n                    refreshed daily at 0:00 GMT+0.\r\n                </p>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"text-primary\">TOTAL</th>\r\n                            <th className=\"text-warning\">NEW*</th>\r\n                            <th className=\"text-danger\">DEATHS</th>\r\n                            <th className=\"text-success\">RECOVERED</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"text-primary\">\r\n                                {numeral(totalCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-warning\">\r\n                                {numeral(newCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-danger\">\r\n                                {numeral(deathCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-success\">\r\n                                {numeral(recoveredCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <p>* Compared to previous day</p>\r\n                <p style={{ fontSize: '120%' }}>\r\n                    Affected countries:{' '}\r\n                    <strong className=\"text-info\">{countryCount}</strong>\r\n                </p>\r\n\r\n                <p>\r\n                    Source:{' '}\r\n                    <a\r\n                        href=\"https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports\"\r\n                        target=\"blank\"\r\n                    >\r\n                        JHU\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Overview\r\n","import React from 'react'\r\nimport Overview from './Overview'\r\nimport List from './List'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <Overview />\r\n            <List groupByCountry={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}