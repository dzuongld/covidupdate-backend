{"version":3,"sources":["components/Loader.js","components/Error.js","contexts/DataContext.js","utils/fields.js","utils/fields-alt.js","components/Overview.js","components/List.js","components/Home.js","visualization/mapbox.js","components/Map.js","components/NavBar.js","components/NewsItem.js","components/NewsFeed.js","App.js","serviceWorker.js","index.js"],"names":["Loader","style","minHeight","display","alignSelf","justifySelf","src","alt","width","textAlign","Error","Context","React","createContext","DataContext","state","data","loading","error","fetch","process","then","response","json","setState","catch","console","log","this","Provider","value","props","children","Component","Overview","context","date","moment","format","allRecords","totalCount","deathCount","recoveredCount","newCount","activeCount","countries","key","record","country","fields","fields2","parseInt","Object","keys","length","processData","covidData","countryCount","fontSize","className","numeral","href","target","contextType","getDataByPage","page","end","start","slice","List","sortData","event","index","newData","sort","a","b","currentPage","dataDisplayed","totalPages","currentCountry","groupByCountry","selectedCountry","list","dataDup","countryName","Confirmed","Deaths","Recovered","NewCases","Active","push","confirmed","deaths","recovered","newCases","active","transformData","newTotalPages","Math","ceil","updateData","goBack","htmlFor","id","onChange","defaultValue","disabled","map","entry","type","onClick","toPage","Home","location","latRaw","lngRaw","lat","parseFloat","lng","isNaN","flyTo","center","zoom","mapboxgl","geojson","totalCases","title","geometry","coordinates","properties","description","features","convertToGeoJSON","forEach","marker","el","document","createElement","Marker","setLngLat","setPopup","Popup","offset","setHTML","addTo","accessToken","Map","onCountryChange","mapbox","entries","container","mapContainer","displayedName","extractNames","ref","NavBar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","NewsItem","link","rel","NewsFeed","borderColor","piece","pubDate","split","join","guid","_","App","fallback","path","exact","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b793df90.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loader = () => {\r\n    const parent = {\r\n        minHeight: '80vh',\r\n        display: 'grid'\r\n    }\r\n    const child = {\r\n        alignSelf: 'center',\r\n        justifySelf: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={parent}>\r\n            <div style={child}>\r\n                <img\r\n                    src=\"https://media.giphy.com/media/l4FGDT7FZkvojdKMw/giphy.gif\"\r\n                    alt=\"Loader\"\r\n                    width=\"300\"\r\n                />\r\n                <h5 style={{ textAlign: 'center' }}>LOADING...</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\n\r\nconst Error = () => {\r\n    const parent = {\r\n        minHeight: '80vh',\r\n        display: 'grid'\r\n    }\r\n    const child = {\r\n        alignSelf: 'center',\r\n        justifySelf: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={parent}>\r\n            <div style={child}>\r\n                <img\r\n                    src=\"https://media.giphy.com/media/8L0Pky6C83SzkzU55a/giphy.gif\"\r\n                    alt=\"Loader\"\r\n                    width=\"300\"\r\n                />\r\n                <h5 style={{ textAlign: 'center' }}>\r\n                    Error retrieving data :(\r\n                </h5>\r\n                <h5 style={{ textAlign: 'center' }}>Please try again later!</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\nimport Loader from '../components/Loader'\r\nimport Error from '../components/Error'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport class DataContext extends React.Component {\r\n    state = { data: {}, loading: true, error: false }\r\n\r\n    componentDidMount() {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/data`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                this.setState({ data: data, loading: false, error: false })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n                this.setState({ error: true })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) return <Error />\r\n        if (this.state.loading) return <Loader />\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Context\r\n","export default {\r\n    COUNTRY: 'Country/Region',\r\n    STATE: 'Province/State',\r\n    LAST_UPDATE: 'Last Update',\r\n    CONFIRMED: 'Confirmed',\r\n    DEATHS: 'Deaths',\r\n    RECOVERED: 'Recovered',\r\n    LATITUDE: 'Latitude',\r\n    LONGITUDE: 'Longitude',\r\n    NEW_CASES: 'NewCases',\r\n    ACTIVE: 'Active',\r\n}\r\n","export default {\r\n    COUNTRY: 'Country_Region',\r\n    STATE: 'Province_State',\r\n    LAST_UPDATE: 'Last_Update',\r\n    CONFIRMED: 'Confirmed',\r\n    DEATHS: 'Deaths',\r\n    RECOVERED: 'Recovered',\r\n    LATITUDE: 'Lat',\r\n    LONGITUDE: 'Long_',\r\n    NEW_CASES: 'NewCases'\r\n}\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport numeral from 'numeral'\r\n\r\nimport DataContext from '../contexts/DataContext'\r\nimport fields from '../utils/fields'\r\nimport fields2 from '../utils/fields-alt'\r\n\r\nconst processData = (allRecords) => {\r\n    let totalCount = 0\r\n    let deathCount = 0\r\n    let recoveredCount = 0\r\n    let newCount = 0\r\n    let activeCount = 0\r\n    let countries = {}\r\n\r\n    // console.table(allRecords)\r\n\r\n    for (const key in allRecords) {\r\n        const record = allRecords[key]\r\n        const country = record[fields.COUNTRY] || record[fields2.COUNTRY]\r\n        if (!countries[country]) countries[country] = 1\r\n        totalCount += parseInt(record[fields.CONFIRMED])\r\n        deathCount += parseInt(record[fields.DEATHS])\r\n        recoveredCount += parseInt(record[fields.RECOVERED])\r\n        newCount += parseInt(record[fields.NEW_CASES])\r\n        activeCount += parseInt(record[fields.ACTIVE])\r\n    }\r\n    const countryCount = Object.keys(countries).length\r\n\r\n    return [\r\n        totalCount,\r\n        deathCount,\r\n        recoveredCount,\r\n        newCount,\r\n        activeCount,\r\n        countryCount,\r\n    ]\r\n}\r\n\r\nclass Overview extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    render() {\r\n        const data = this.context.data\r\n        const date = moment(data.date, 'MM-DD-YYYY').format('DD/MM/YYYY')\r\n        const records = data.covidData\r\n        const [\r\n            totalCount,\r\n            deathCount,\r\n            recoveredCount,\r\n            newCount,\r\n            activeCount,\r\n            countryCount,\r\n        ] = processData(records)\r\n\r\n        return (\r\n            <div>\r\n                <h2>Overview</h2>\r\n                <p style={{ fontSize: '110%' }}>\r\n                    Last updated on <strong>{date}</strong>. Data is typically\r\n                    refreshed daily at 0:00 GMT+0.\r\n                </p>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"text-primary\">TOTAL</th>\r\n                            <th className=\"text-warning\">NEW*</th>\r\n                            <th className=\"text-danger\">DEATHS</th>\r\n                            <th className=\"text-success\">RECOVERED</th>\r\n                            <th className=\"text-info\">ACTIVE</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"text-primary\">\r\n                                {numeral(totalCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-warning\">\r\n                                {numeral(newCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-danger\">\r\n                                {numeral(deathCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-success\">\r\n                                {numeral(recoveredCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-info\">\r\n                                {numeral(activeCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <table className=\"table table-striped table-mobile\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"col text-primary\">TOTAL</td>\r\n                            <td className=\"text-primary\">\r\n                                {numeral(totalCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"text-warning\">NEW*</td>\r\n                            <td className=\"text-warning\">\r\n                                {numeral(newCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td className=\"text-danger\">DEATHS</td>\r\n                            <td className=\"text-danger\">\r\n                                {numeral(deathCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td className=\"text-success\">RECOVERED</td>\r\n                            <td className=\"text-success\">\r\n                                {numeral(recoveredCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td className=\"text-info\">ACTIVE</td>\r\n                            <td className=\"text-info\">\r\n                                {numeral(activeCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <p>* Compared to previous day</p>\r\n                <p style={{ fontSize: '120%' }}>\r\n                    Affected countries:{' '}\r\n                    <strong className=\"text-info\">{countryCount}</strong>\r\n                </p>\r\n\r\n                <p>\r\n                    Source:{' '}\r\n                    <a\r\n                        href=\"https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports\"\r\n                        target=\"blank\"\r\n                    >\r\n                        JHU CSSE\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Overview\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport fields from '../utils/fields'\r\nimport fields2 from '../utils/fields-alt'\r\nimport DataContext from '../contexts/DataContext'\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst transformData = (data, groupByCountry, selectedCountry) => {\r\n    // console.log(data)\r\n    const list = []\r\n    const dataDup = {}\r\n\r\n    if (groupByCountry) {\r\n        for (const key in data.covidData) {\r\n            const country = data.covidData[key]\r\n            const countryName =\r\n                country[fields.COUNTRY] || country[fields2.COUNTRY]\r\n            if (dataDup[countryName]) {\r\n                dataDup[countryName][fields.CONFIRMED] += parseInt(\r\n                    country[fields.CONFIRMED]\r\n                )\r\n                dataDup[countryName][fields.DEATHS] += parseInt(\r\n                    country[fields.DEATHS]\r\n                )\r\n                dataDup[countryName][fields.RECOVERED] += parseInt(\r\n                    country[fields.RECOVERED]\r\n                )\r\n                dataDup[countryName][fields.NEW_CASES] += parseInt(\r\n                    country[fields.NEW_CASES]\r\n                )\r\n                dataDup[countryName][fields.ACTIVE] += parseInt(\r\n                    country[fields.ACTIVE]\r\n                )\r\n            } else {\r\n                dataDup[countryName] = {}\r\n                dataDup[countryName][fields.CONFIRMED] = parseInt(\r\n                    country[fields.CONFIRMED]\r\n                )\r\n                dataDup[countryName][fields.DEATHS] = parseInt(\r\n                    country[fields.DEATHS]\r\n                )\r\n                dataDup[countryName][fields.RECOVERED] = parseInt(\r\n                    country[fields.RECOVERED]\r\n                )\r\n                dataDup[countryName][fields.NEW_CASES] = parseInt(\r\n                    country[fields.NEW_CASES]\r\n                )\r\n                dataDup[countryName][fields.ACTIVE] = parseInt(\r\n                    country[fields.ACTIVE]\r\n                )\r\n            }\r\n        }\r\n\r\n        for (const country in dataDup) {\r\n            const { Confirmed, Deaths, Recovered, NewCases, Active } = dataDup[\r\n                country\r\n            ]\r\n            list.push([country, Confirmed, NewCases, Deaths, Recovered, Active])\r\n        }\r\n    } else {\r\n        for (const key in data.covidData) {\r\n            const country = data.covidData[key]\r\n            const countryName =\r\n                country[fields.COUNTRY] || country[fields2.COUNTRY]\r\n            if (countryName === selectedCountry) {\r\n                const state = country[fields.STATE] || country[fields2.STATE]\r\n                const confirmed = country[fields.CONFIRMED]\r\n                const deaths = country[fields.DEATHS]\r\n                const recovered = country[fields.RECOVERED]\r\n                const newCases = country[fields.NEW_CASES]\r\n                const active = country[fields.ACTIVE]\r\n                list.push([\r\n                    state,\r\n                    confirmed,\r\n                    newCases,\r\n                    deaths,\r\n                    recovered,\r\n                    active,\r\n                ])\r\n            }\r\n        }\r\n    }\r\n\r\n    return list\r\n}\r\n\r\nconst getDataByPage = (data, page) => {\r\n    const end = page * PAGE_SIZE\r\n    const start = end - PAGE_SIZE\r\n    return data.slice(start, end)\r\n}\r\n\r\nclass List extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    constructor(props, context) {\r\n        super(props, context)\r\n        this.state = {\r\n            data: [],\r\n            dataDisplayed: [],\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n            currentCountry: this.props.country,\r\n        }\r\n    }\r\n\r\n    updateData() {\r\n        const newData = transformData(\r\n            this.context.data,\r\n            this.props.groupByCountry,\r\n            this.props.country\r\n        )\r\n        newData.sort((a, b) => {\r\n            return b[1] - a[1]\r\n        })\r\n\r\n        const newTotalPages = Math.ceil(newData.length / PAGE_SIZE)\r\n\r\n        this.setState({\r\n            data: newData,\r\n            totalPages: newTotalPages,\r\n            dataDisplayed: getDataByPage(newData, this.state.currentPage),\r\n            currentCountry: this.props.country,\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.data.length === 0) this.updateData()\r\n    }\r\n\r\n    // refresh list only when country is changed\r\n    componentDidUpdate() {\r\n        if (this.props.country !== this.state.currentCountry) this.updateData()\r\n    }\r\n\r\n    // sort by descending order\r\n    sortData = (event) => {\r\n        const index = parseInt(event.target.value)\r\n        const newData = this.state.data.slice()\r\n        newData.sort((a, b) => {\r\n            return b[index] - a[index]\r\n        })\r\n        this.setState({\r\n            data: newData,\r\n            currentPage: 1,\r\n            dataDisplayed: getDataByPage(newData, 1),\r\n        })\r\n    }\r\n\r\n    toPage(goBack) {\r\n        const page = goBack\r\n            ? this.state.currentPage - 1\r\n            : this.state.currentPage + 1\r\n        const newData = getDataByPage(this.state.data, page)\r\n        this.setState({\r\n            dataDisplayed: newData,\r\n            currentPage: page,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.state.currentCountry}</h2>\r\n\r\n                <h4>\r\n                    {this.props.groupByCountry\r\n                        ? 'Countries/Regions'\r\n                        : 'States/Provinces'}\r\n                </h4>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-group mb-3 col-8 col-md-4 col-lg-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\"\r\n                            >\r\n                                Sort By\r\n                            </label>\r\n                        </div>\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id=\"inputGroupSelect01\"\r\n                            onChange={this.sortData}\r\n                            defaultValue=\"1\"\r\n                        >\r\n                            <option value=\"\" disabled>\r\n                                --Select One--\r\n                            </option>\r\n                            <option value=\"1\">Total Cases</option>\r\n                            <option value=\"2\">New Cases</option>\r\n                            <option value=\"3\">Deaths</option>\r\n                            <option value=\"4\">Recovered</option>\r\n                            <option value=\"5\">Active</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"table table-striped table-responsive-md\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>\r\n                                {this.props.groupByCountry\r\n                                    ? 'COUNTRY'\r\n                                    : 'STATE'}\r\n                            </th>\r\n                            <th className=\"text-primary\">TOTAL</th>\r\n                            <th className=\"text-warning\">NEW</th>\r\n                            <th className=\"text-danger\">DEATHS</th>\r\n                            <th className=\"text-success\">RECOVERED</th>\r\n                            <th className=\"text-info\">ACTIVE</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.dataDisplayed.map((entry, index) => {\r\n                            return (\r\n                                <tr key={entry[0]}>\r\n                                    <td>\r\n                                        {(this.state.currentPage - 1) *\r\n                                            PAGE_SIZE +\r\n                                            index +\r\n                                            1}\r\n                                    </td>\r\n                                    <td>{entry[0]}</td>\r\n                                    <td className=\"text-primary\">\r\n                                        {numeral(entry[1]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-warning\">\r\n                                        {numeral(entry[2]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-danger\">\r\n                                        {numeral(entry[3]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-success\">\r\n                                        {numeral(entry[4]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-info\">\r\n                                        {numeral(entry[5]).format('0,0')}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"d-flex justify-content-center p-3\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        disabled={this.state.currentPage === 1}\r\n                        onClick={() => this.toPage(true)}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary ml-1\"\r\n                        disabled={\r\n                            this.state.currentPage === this.state.totalPages\r\n                        }\r\n                        onClick={() => this.toPage(false)}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\nimport Overview from './Overview'\r\nimport List from './List'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <Overview />\r\n\r\n            {/* <div className=\"alert alert-dismissible alert-info\">\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\">\r\n                    &times;\r\n                </button>\r\n                <p className=\"mb-0\">\r\n                    Data of France is erroneous at the moment so please\r\n                    disregard it for now.\r\n                </p>\r\n            </div> */}\r\n\r\n            <List groupByCountry={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import fields from '../utils/fields'\r\nimport fields2 from '../utils/fields-alt'\r\n\r\nconst convertToGeoJSON = (data) => {\r\n    const geojson = {}\r\n    geojson.type = 'FeatureCollection'\r\n    geojson.features = []\r\n\r\n    for (const location in data) {\r\n        const state =\r\n            data[location][fields.STATE] || data[location][fields2.STATE]\r\n        const country =\r\n            data[location][fields.COUNTRY] || data[location][fields2.COUNTRY]\r\n        const totalCases = parseInt(data[location][fields.CONFIRMED])\r\n        const newCases = parseInt(data[location][fields.NEW_CASES])\r\n        const deaths = parseInt(data[location][fields.DEATHS])\r\n        const recovered = parseInt(data[location][fields.RECOVERED])\r\n\r\n        const latRaw =\r\n            data[location][fields.LATITUDE] || data[location][fields2.LATITUDE]\r\n        const lngRaw =\r\n            data[location][fields.LONGITUDE] ||\r\n            data[location][fields2.LONGITUDE]\r\n\r\n        const lat = parseFloat(latRaw)\r\n        const lng = parseFloat(lngRaw)\r\n\r\n        if (isNaN(lat) || isNaN(lng)) continue\r\n\r\n        const title = state !== '' ? state + ' - ' + country : country\r\n        const record = {}\r\n        record.type = 'Feature'\r\n        record.geometry = {\r\n            type: 'Point',\r\n            coordinates: [lng, lat],\r\n        }\r\n        record.properties = {\r\n            title,\r\n            totalCases,\r\n            newCases,\r\n            deaths,\r\n            recovered,\r\n            description: `\r\n                        <strong>${title}</strong><br/>\r\n                        Confirmed: ${totalCases}<br/>\r\n                        New Cases: ${newCases}<br/>\r\n                        Deaths: ${deaths}<br/>\r\n                        Recovered: ${recovered}\r\n                        `,\r\n        }\r\n        geojson.features.push(record)\r\n    }\r\n\r\n    return geojson\r\n}\r\n\r\nexport const addMarkers = (data, map, mapboxgl) => {\r\n    const geojson = convertToGeoJSON(data)\r\n\r\n    geojson.features.forEach(function (marker) {\r\n        // create a HTML element for each feature\r\n        const el = document.createElement('div')\r\n        el.className = 'marker'\r\n\r\n        // make a marker for each feature and add to the map\r\n        new mapboxgl.Marker(el)\r\n            .setLngLat(marker.geometry.coordinates)\r\n            .setPopup(\r\n                new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                    .setHTML(marker.properties.description)\r\n            )\r\n            .addTo(map)\r\n    })\r\n}\r\n\r\nconst flyToLocation = (data, map, location) => {\r\n    const latRaw =\r\n        data[location][fields.LATITUDE] || data[location][fields2.LATITUDE]\r\n    const lngRaw =\r\n        data[location][fields.LONGITUDE] || data[location][fields2.LONGITUDE]\r\n    const lat = parseFloat(latRaw)\r\n    const lng = parseFloat(lngRaw)\r\n    if (!isNaN(lat) && !isNaN(lng)) map.flyTo({ center: [lng, lat], zoom: 6 })\r\n}\r\n\r\nexport default { flyToLocation, addMarkers }\r\n","import React from 'react'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport List from './List'\r\n\r\nimport DataContext from '../contexts/DataContext'\r\nimport fields from '../utils/fields'\r\nimport fields2 from '../utils/fields-alt'\r\nimport mapbox from '../visualization/mapbox'\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API\r\n\r\nclass Map extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    state = { country: 'Australia', data: {} }\r\n    map = null\r\n\r\n    componentDidMount() {\r\n        if (Object.entries(this.state.data).length === 0) {\r\n            this.setState({\r\n                data: this.context.data.covidData\r\n            })\r\n            this.map = new mapboxgl.Map({\r\n                container: this.mapContainer,\r\n                style: 'mapbox://styles/dzuongld/ck7stm0id1l9t1inuoudjp6oy'\r\n            })\r\n            mapbox.addMarkers(this.context.data.covidData, this.map, mapboxgl)\r\n        }\r\n    }\r\n\r\n    /* \r\n        example element: ['ChinaHubei','China - Hubei']\r\n     */\r\n    extractNames(data) {\r\n        const list = []\r\n        for (const location in data) {\r\n            const country =\r\n                data[location][fields.COUNTRY] ||\r\n                data[location][fields2.COUNTRY]\r\n            const state =\r\n                data[location][fields.STATE] ||\r\n                data[location][fields2.STATE] ||\r\n                ''\r\n            const displayedName =\r\n                state !== '' ? country + ' - ' + state : country\r\n            list.push([location, displayedName])\r\n        }\r\n        list.sort((a, b) => {\r\n            if (a[0] > b[0]) return 1\r\n            else if (a[0] < b[0]) return -1\r\n            return 0\r\n        })\r\n        return list\r\n    }\r\n\r\n    onCountryChange = (event) => {\r\n        const location = event.target.value\r\n        const country =\r\n            this.state.data[location][fields.COUNTRY] ||\r\n            this.state.data[location][fields2.COUNTRY]\r\n\r\n        // trigger 'fly' event on map\r\n        mapbox.flyToLocation(this.state.data, this.map, location)\r\n        // refresh list\r\n        this.setState({ country: country })\r\n    }\r\n\r\n    render() {\r\n        const list = this.extractNames(this.state.data)\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-group my-3  col-12 col-md-7\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\"\r\n                            >\r\n                                Location\r\n                            </label>\r\n                        </div>\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id=\"inputGroupSelect01\"\r\n                            onChange={this.onCountryChange}\r\n                            defaultValue=\"\"\r\n                        >\r\n                            <option value=\"\" disabled>\r\n                                --Select One--\r\n                            </option>\r\n                            {list.map((record) => {\r\n                                return (\r\n                                    <option key={record[0]} value={record[0]}>\r\n                                        {record[1]}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    ref={(el) => (this.mapContainer = el)}\r\n                    className=\"mapContainer\"\r\n                ></div>\r\n                <List groupByCountry={false} country={this.state.country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-dark bg-dark\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n                COVID-19 DATA\r\n            </Link>\r\n            <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#navbarColor02\"\r\n                aria-controls=\"navbarColor02\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/\">\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/map\">\r\n                            Map\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/news\">\r\n                            News\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\n\r\nconst NewsItem = (props) => {\r\n    return (\r\n        <div className=\"card my-2\">\r\n            <div className=\"card-body\">\r\n                <a\r\n                    href={props.link}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"card-link\"\r\n                >\r\n                    <h5 className=\"card-title\">{props.title}</h5>\r\n                </a>\r\n                <h6 className=\"card-subtitle mb-2 text-muted\">{props.date}</h6>\r\n                <p className=\"card-text\">{props.description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewsItem\r\n","import React from 'react'\r\nimport NewsItem from './NewsItem'\r\nimport Loader from './Loader'\r\nimport Error from './Error'\r\n\r\nconst PAGE_SIZE = 4\r\n\r\nconst getDataByPage = (data, page) => {\r\n    const end = page * PAGE_SIZE\r\n    const start = end - PAGE_SIZE\r\n    return data.slice(start, end)\r\n}\r\n\r\nclass NewsFeed extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            dataDisplayed: [],\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n            loading: true,\r\n            error: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/newsfeed`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((newData) => {\r\n                const newTotalPages = Math.ceil(newData.length / PAGE_SIZE)\r\n                this.setState({\r\n                    data: newData,\r\n                    totalPages: newTotalPages,\r\n                    dataDisplayed: getDataByPage(\r\n                        newData,\r\n                        this.state.currentPage\r\n                    ),\r\n                    loading: false,\r\n                    error: false\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n                this.setState({ error: true })\r\n            })\r\n    }\r\n\r\n    toPage(goBack) {\r\n        const page = goBack\r\n            ? this.state.currentPage - 1\r\n            : this.state.currentPage + 1\r\n        const newData = getDataByPage(this.state.data, page)\r\n        this.setState({\r\n            dataDisplayed: newData,\r\n            currentPage: page\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) return <Error />\r\n        if (this.state.loading) return <Loader />\r\n        return (\r\n            <div>\r\n                <h2>News Feed</h2>\r\n                <hr className=\"my-2\" style={{ borderColor: 'white' }}></hr>\r\n                <h4>\r\n                    Latest updates from the Australian Department of Health.\r\n                    Many of the articles are about the COVID-19 situation in\r\n                    Australia.\r\n                </h4>\r\n                {this.state.dataDisplayed.map((piece) => {\r\n                    return (\r\n                        <NewsItem\r\n                            key={piece.description}\r\n                            title={piece.title}\r\n                            description={piece.description}\r\n                            date={piece.pubDate[0]\r\n                                .split(' ')\r\n                                .slice(0, 4)\r\n                                .join(' ')}\r\n                            link={piece.guid[0]._}\r\n                        />\r\n                    )\r\n                })}\r\n\r\n                <div className=\"d-flex justify-content-center p-3\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        disabled={this.state.currentPage === 1}\r\n                        onClick={() => this.toPage(true)}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary ml-1\"\r\n                        disabled={\r\n                            this.state.currentPage === this.state.totalPages\r\n                        }\r\n                        onClick={() => this.toPage(false)}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewsFeed\r\n","import React, { Suspense } from 'react'\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\n\nimport './App.css'\nimport Home from './components/Home'\nimport Map from './components/Map'\nimport NavBar from './components/NavBar'\nimport { DataContext } from './contexts/DataContext'\nimport Loader from './components/Loader'\nimport NewsFeed from './components/NewsFeed'\n\n// lazy loading - downloaded on the fly\n// const Home = React.lazy(() => import('./components/Home'))\n// const NavBar = React.lazy(() => import('./components/NavBar'))\n// const Map = React.lazy(() => import('./components/Map'))\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <DataContext>\n                    <BrowserRouter>\n                        <Suspense\n                            fallback={\n                                <div>\n                                    <Loader />\n                                </div>\n                            }\n                        >\n                            <NavBar />\n                            <div className=\"container\">\n                                <Switch>\n                                    {/* stop when found a match */}\n                                    <Route path=\"/\" exact>\n                                        <Home />\n                                    </Route>\n                                    <Route path=\"/map\">\n                                        <Map />\n                                    </Route>\n                                    <Route path=\"/news\">\n                                        <NewsFeed />\n                                    </Route>\n                                    {/* fall back */}\n                                    <Redirect to=\"/\"></Redirect>\n                                </Switch>\n                            </div>\n                        </Suspense>\n                    </BrowserRouter>\n                </DataContext>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}