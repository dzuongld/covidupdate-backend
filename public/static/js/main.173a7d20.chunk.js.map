{"version":3,"sources":["components/Loader.js","contexts/DataContext.js","utils/fields.js","components/Overview.js","components/List.js","components/Home.js","visualization/mapbox.js","components/Map.js","components/NavBar.js","components/NewsItem.js","components/NewsFeed.js","App.js","serviceWorker.js","index.js"],"names":["Loader","style","minHeight","display","alignSelf","justifySelf","src","alt","width","textAlign","Context","React","createContext","DataContext","state","data","loading","fetch","process","then","response","json","setState","catch","error","console","log","this","Provider","value","props","children","Component","Overview","context","date","moment","format","allRecords","totalCount","deathCount","recoveredCount","newCount","countries","key","record","country","fields","parseInt","Object","keys","length","processData","covidData","countryCount","fontSize","className","numeral","href","target","contextType","getDataByPage","page","end","start","slice","List","sortData","event","index","newData","sort","a","b","currentPage","dataDisplayed","totalPages","currentCountry","groupByCountry","selectedCountry","list","dataDup","countryName","Confirmed","Deaths","Recovered","NewCases","push","confirmed","deaths","recovered","newCases","transformData","newTotalPages","Math","ceil","updateData","goBack","htmlFor","id","onChange","defaultValue","disabled","map","entry","type","onClick","toPage","Home","location","lat","parseFloat","lng","flyTo","center","zoom","mapboxgl","geojson","totalCases","title","geometry","coordinates","properties","description","features","convertToGeoJSON","forEach","marker","el","document","createElement","Marker","setLngLat","setPopup","Popup","offset","setHTML","addTo","accessToken","Map","onCountryChange","mapbox","entries","container","mapContainer","displayedName","extractNames","ref","NavBar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","NewsItem","link","rel","NewsFeed","borderColor","piece","pubDate","split","join","guid","_","App","fallback","path","exact","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.173a7d20.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loader = () => {\r\n    const parent = {\r\n        minHeight: '90vh',\r\n        display: 'grid'\r\n    }\r\n    const child = {\r\n        alignSelf: 'center',\r\n        justifySelf: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={parent}>\r\n            <div style={child}>\r\n                <img\r\n                    src=\"https://media.giphy.com/media/l4FGDT7FZkvojdKMw/giphy.gif\"\r\n                    alt=\"Loader\"\r\n                    width=\"300\"\r\n                />\r\n                <h5 style={{ textAlign: 'center' }}>LOADING...</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport Loader from '../components/Loader'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport class DataContext extends React.Component {\r\n    state = { data: {}, loading: true }\r\n\r\n    componentDidMount() {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/data`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                this.setState({ data: data, loading: false })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) return <Loader />\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Context\r\n","export default {\r\n    COUNTRY: 'Country/Region',\r\n    STATE: 'Province/State',\r\n    LAST_UPDATE: 'Last Update',\r\n    CONFIRMED: 'Confirmed',\r\n    DEATHS: 'Deaths',\r\n    RECOVERED: 'Recovered',\r\n    LATITUDE: 'Latitude',\r\n    LONGITUDE: 'Longitude',\r\n    NEW_CASES: 'NewCases'\r\n}\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport numeral from 'numeral'\r\n\r\nimport DataContext from '../contexts/DataContext'\r\nimport fields from '../utils/fields'\r\n\r\nconst processData = (allRecords) => {\r\n    let totalCount = 0\r\n    let deathCount = 0\r\n    let recoveredCount = 0\r\n    let newCount = 0\r\n    let countries = {}\r\n\r\n    for (const key in allRecords) {\r\n        const record = allRecords[key]\r\n        const country = record[fields.COUNTRY]\r\n        if (!countries[country]) countries[country] = 1\r\n        totalCount += parseInt(record[fields.CONFIRMED])\r\n        deathCount += parseInt(record[fields.DEATHS])\r\n        recoveredCount += parseInt(record[fields.RECOVERED])\r\n        newCount += parseInt(record[fields.NEW_CASES])\r\n    }\r\n    const countryCount = Object.keys(countries).length\r\n\r\n    return [totalCount, deathCount, recoveredCount, newCount, countryCount]\r\n}\r\n\r\nclass Overview extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    render() {\r\n        const data = this.context.data\r\n        const date = moment(data.date, 'MM-DD-YYYY').format('DD/MM/YYYY')\r\n        const records = data.covidData\r\n        const [\r\n            totalCount,\r\n            deathCount,\r\n            recoveredCount,\r\n            newCount,\r\n            countryCount\r\n        ] = processData(records)\r\n\r\n        return (\r\n            <div>\r\n                <h2>Overview</h2>\r\n                <p style={{ fontSize: '110%' }}>\r\n                    Last updated on <strong>{date}</strong>. Data is typically\r\n                    refreshed daily at 0:00 GMT+0.\r\n                </p>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"text-primary\">TOTAL</th>\r\n                            <th className=\"text-warning\">NEW*</th>\r\n                            <th className=\"text-danger\">DEATHS</th>\r\n                            <th className=\"text-success\">RECOVERED</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"text-primary\">\r\n                                {numeral(totalCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-warning\">\r\n                                {numeral(newCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-danger\">\r\n                                {numeral(deathCount).format('0,0')}\r\n                            </td>\r\n                            <td className=\"text-success\">\r\n                                {numeral(recoveredCount).format('0,0')}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <p>* Compared to previous day</p>\r\n                <p style={{ fontSize: '120%' }}>\r\n                    Affected countries:{' '}\r\n                    <strong className=\"text-info\">{countryCount}</strong>\r\n                </p>\r\n\r\n                <p>\r\n                    Source:{' '}\r\n                    <a\r\n                        href=\"https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports\"\r\n                        target=\"blank\"\r\n                    >\r\n                        JHU CSSE\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Overview\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport fields from '../utils/fields'\r\nimport DataContext from '../contexts/DataContext'\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst transformData = (data, groupByCountry, selectedCountry) => {\r\n    // console.log(data)\r\n    const list = []\r\n    const dataDup = {}\r\n\r\n    if (groupByCountry) {\r\n        for (const key in data.covidData) {\r\n            const country = data.covidData[key]\r\n            const countryName = country[fields.COUNTRY]\r\n            if (dataDup[countryName]) {\r\n                dataDup[countryName][fields.CONFIRMED] += parseInt(\r\n                    country[fields.CONFIRMED]\r\n                )\r\n                dataDup[countryName][fields.DEATHS] += parseInt(\r\n                    country[fields.DEATHS]\r\n                )\r\n                dataDup[countryName][fields.RECOVERED] += parseInt(\r\n                    country[fields.RECOVERED]\r\n                )\r\n                dataDup[countryName][fields.NEW_CASES] += parseInt(\r\n                    country[fields.NEW_CASES]\r\n                )\r\n            } else {\r\n                dataDup[countryName] = {}\r\n                dataDup[countryName][fields.CONFIRMED] = parseInt(\r\n                    country[fields.CONFIRMED]\r\n                )\r\n                dataDup[countryName][fields.DEATHS] = parseInt(\r\n                    country[fields.DEATHS]\r\n                )\r\n                dataDup[countryName][fields.RECOVERED] = parseInt(\r\n                    country[fields.RECOVERED]\r\n                )\r\n                dataDup[countryName][fields.NEW_CASES] = parseInt(\r\n                    country[fields.NEW_CASES]\r\n                )\r\n            }\r\n        }\r\n\r\n        for (const country in dataDup) {\r\n            const { Confirmed, Deaths, Recovered, NewCases } = dataDup[country]\r\n            list.push([country, Confirmed, NewCases, Deaths, Recovered])\r\n        }\r\n    } else {\r\n        for (const key in data.covidData) {\r\n            const country = data.covidData[key]\r\n            const countryName = country[fields.COUNTRY]\r\n            if (countryName === selectedCountry) {\r\n                const state = country[fields.STATE]\r\n                const confirmed = country[fields.CONFIRMED]\r\n                const deaths = country[fields.DEATHS]\r\n                const recovered = country[fields.RECOVERED]\r\n                const newCases = country[fields.NEW_CASES]\r\n                list.push([state, confirmed, newCases, deaths, recovered])\r\n            }\r\n        }\r\n    }\r\n\r\n    return list\r\n}\r\n\r\nconst getDataByPage = (data, page) => {\r\n    const end = page * PAGE_SIZE\r\n    const start = end - PAGE_SIZE\r\n    return data.slice(start, end)\r\n}\r\n\r\nclass List extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    constructor(props, context) {\r\n        super(props, context)\r\n        this.state = {\r\n            data: [],\r\n            dataDisplayed: [],\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n            currentCountry: this.props.country\r\n        }\r\n    }\r\n\r\n    updateData() {\r\n        const newData = transformData(\r\n            this.context.data,\r\n            this.props.groupByCountry,\r\n            this.props.country\r\n        )\r\n        const newTotalPages = Math.ceil(newData.length / PAGE_SIZE)\r\n        this.setState({\r\n            data: newData,\r\n            totalPages: newTotalPages,\r\n            dataDisplayed: getDataByPage(newData, this.state.currentPage),\r\n            currentCountry: this.props.country\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.data.length === 0) this.updateData()\r\n    }\r\n\r\n    // refresh list only when country is changed\r\n    componentDidUpdate() {\r\n        if (this.props.country !== this.state.currentCountry) this.updateData()\r\n    }\r\n\r\n    // sort by descending order\r\n    sortData = (event) => {\r\n        const index = parseInt(event.target.value)\r\n        const newData = this.state.data.slice()\r\n        newData.sort((a, b) => {\r\n            return b[index] - a[index]\r\n        })\r\n        this.setState({\r\n            data: newData,\r\n            currentPage: 1,\r\n            dataDisplayed: getDataByPage(newData, 1)\r\n        })\r\n    }\r\n\r\n    toPage(goBack) {\r\n        const page = goBack\r\n            ? this.state.currentPage - 1\r\n            : this.state.currentPage + 1\r\n        const newData = getDataByPage(this.state.data, page)\r\n        this.setState({\r\n            dataDisplayed: newData,\r\n            currentPage: page\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.state.currentCountry}</h2>\r\n\r\n                <h4>\r\n                    {this.props.groupByCountry\r\n                        ? 'Countries/Regions'\r\n                        : 'States/Provinces'}\r\n                </h4>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-group mb-3 col-8 col-md-4 col-lg-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\"\r\n                            >\r\n                                Sort By\r\n                            </label>\r\n                        </div>\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id=\"inputGroupSelect01\"\r\n                            onChange={this.sortData}\r\n                            defaultValue=\"\"\r\n                        >\r\n                            <option value=\"\" disabled>\r\n                                --Select One--\r\n                            </option>\r\n                            <option value=\"1\">Total Cases</option>\r\n                            <option value=\"2\">New Cases</option>\r\n                            <option value=\"3\">Deaths</option>\r\n                            <option value=\"4\">Recovered</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"table table-striped table-responsive-md\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>\r\n                                {this.props.groupByCountry\r\n                                    ? 'COUNTRY'\r\n                                    : 'STATE'}\r\n                            </th>\r\n                            <th className=\"text-primary\">TOTAL</th>\r\n                            <th className=\"text-warning\">NEW</th>\r\n                            <th className=\"text-danger\">DEATHS</th>\r\n                            <th className=\"text-success\">RECOVERED</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.dataDisplayed.map((entry, index) => {\r\n                            return (\r\n                                <tr key={entry[0]}>\r\n                                    <td>\r\n                                        {(this.state.currentPage - 1) * 10 +\r\n                                            index +\r\n                                            1}\r\n                                    </td>\r\n                                    <td>{entry[0]}</td>\r\n                                    <td className=\"text-primary\">\r\n                                        {numeral(entry[1]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-warning\">\r\n                                        {numeral(entry[2]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-danger\">\r\n                                        {numeral(entry[3]).format('0,0')}\r\n                                    </td>\r\n                                    <td className=\"text-success\">\r\n                                        {numeral(entry[4]).format('0,0')}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"d-flex justify-content-center p-3\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        disabled={this.state.currentPage === 1}\r\n                        onClick={() => this.toPage(true)}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary ml-1\"\r\n                        disabled={\r\n                            this.state.currentPage === this.state.totalPages\r\n                        }\r\n                        onClick={() => this.toPage(false)}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\nimport Overview from './Overview'\r\nimport List from './List'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <Overview />\r\n            <List groupByCountry={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import fields from '../utils/fields'\r\n\r\nconst convertToGeoJSON = (data) => {\r\n    const geojson = {}\r\n    geojson.type = 'FeatureCollection'\r\n    geojson.features = []\r\n\r\n    for (const location in data) {\r\n        const state = data[location][fields.STATE]\r\n        const country = data[location][fields.COUNTRY]\r\n        const totalCases = parseInt(data[location][fields.CONFIRMED])\r\n        const newCases = parseInt(data[location][fields.NEW_CASES])\r\n        const deaths = parseInt(data[location][fields.DEATHS])\r\n        const recovered = parseInt(data[location][fields.RECOVERED])\r\n        const lat = parseFloat(data[location][fields.LATITUDE])\r\n        const lng = parseFloat(data[location][fields.LONGITUDE])\r\n\r\n        const title = state !== '' ? state + ' - ' + country : country\r\n        const record = {}\r\n        record.type = 'Feature'\r\n        record.geometry = {\r\n            type: 'Point',\r\n            coordinates: [lng, lat]\r\n        }\r\n        record.properties = {\r\n            title,\r\n            totalCases,\r\n            newCases,\r\n            deaths,\r\n            recovered,\r\n            description: `\r\n                        <strong>${title}</strong><br/>\r\n                        Confirmed: ${totalCases}<br/>\r\n                        New Cases: ${newCases}<br/>\r\n                        Deaths: ${deaths}<br/>\r\n                        Recovered: ${recovered}\r\n                        `\r\n        }\r\n        geojson.features.push(record)\r\n    }\r\n\r\n    return geojson\r\n}\r\n\r\nexport const addMarkers = (data, map, mapboxgl) => {\r\n    const geojson = convertToGeoJSON(data)\r\n\r\n    geojson.features.forEach(function(marker) {\r\n        // create a HTML element for each feature\r\n        const el = document.createElement('div')\r\n        el.className = 'marker'\r\n\r\n        // make a marker for each feature and add to the map\r\n        new mapboxgl.Marker(el)\r\n            .setLngLat(marker.geometry.coordinates)\r\n            .setPopup(\r\n                new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                    .setHTML(marker.properties.description)\r\n            )\r\n            .addTo(map)\r\n    })\r\n}\r\n\r\nconst flyToLocation = (data, map, location) => {\r\n    const lat = parseFloat(data[location][fields.LATITUDE])\r\n    const lng = parseFloat(data[location][fields.LONGITUDE])\r\n    map.flyTo({ center: [lng, lat], zoom: 6 })\r\n}\r\n\r\nexport default { flyToLocation, addMarkers }\r\n","import React from 'react'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport List from './List'\r\n\r\nimport DataContext from '../contexts/DataContext'\r\nimport fields from '../utils/fields'\r\nimport mapbox from '../visualization/mapbox'\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API\r\n\r\nclass Map extends React.Component {\r\n    static contextType = DataContext\r\n\r\n    state = { country: 'Australia', data: {} }\r\n    map = null\r\n\r\n    componentDidMount() {\r\n        if (Object.entries(this.state.data).length === 0) {\r\n            this.setState({\r\n                data: this.context.data.covidData\r\n            })\r\n        }\r\n        this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/dzuongld/ck7stm0id1l9t1inuoudjp6oy'\r\n        })\r\n        mapbox.addMarkers(this.context.data.covidData, this.map, mapboxgl)\r\n    }\r\n\r\n    /* \r\n        example element: ['ChinaHubei','China - Hubei']\r\n     */\r\n    extractNames(data) {\r\n        const list = []\r\n        for (const location in data) {\r\n            const country = data[location][fields.COUNTRY]\r\n            const state = data[location][fields.STATE]\r\n            const displayedName =\r\n                state !== '' ? country + ' - ' + state : country\r\n            list.push([location, displayedName])\r\n        }\r\n        list.sort((a, b) => {\r\n            if (a[0] > b[0]) return 1\r\n            else if (a[0] < b[0]) return -1\r\n            return 0\r\n        })\r\n        return list\r\n    }\r\n\r\n    onCountryChange = (event) => {\r\n        const location = event.target.value\r\n        const country = this.state.data[location][fields.COUNTRY]\r\n\r\n        // trigger 'fly' event on map\r\n        mapbox.flyToLocation(this.state.data, this.map, location)\r\n        // refresh list\r\n        this.setState({ country: country })\r\n    }\r\n\r\n    render() {\r\n        const list = this.extractNames(this.state.data)\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-group my-3  col-12 col-md-7\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\"\r\n                            >\r\n                                Location\r\n                            </label>\r\n                        </div>\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id=\"inputGroupSelect01\"\r\n                            onChange={this.onCountryChange}\r\n                            defaultValue=\"\"\r\n                        >\r\n                            <option value=\"\" disabled>\r\n                                --Select One--\r\n                            </option>\r\n                            {list.map((record) => {\r\n                                return (\r\n                                    <option key={record[0]} value={record[0]}>\r\n                                        {record[1]}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    ref={(el) => (this.mapContainer = el)}\r\n                    className=\"mapContainer\"\r\n                ></div>\r\n                <List groupByCountry={false} country={this.state.country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-dark bg-dark\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n                COVID-19 DATA\r\n            </Link>\r\n            <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#navbarColor02\"\r\n                aria-controls=\"navbarColor02\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/\">\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/map\">\r\n                            Map\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/news\">\r\n                            News\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\n\r\nconst NewsItem = (props) => {\r\n    return (\r\n        <div className=\"card my-2\">\r\n            <div className=\"card-body\">\r\n                <a\r\n                    href={props.link}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"card-link\"\r\n                >\r\n                    <h5 className=\"card-title\">{props.title}</h5>\r\n                </a>\r\n                <h6 className=\"card-subtitle mb-2 text-muted\">{props.date}</h6>\r\n                <p className=\"card-text\">{props.description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewsItem\r\n","import React from 'react'\r\nimport NewsItem from './NewsItem'\r\n\r\nconst PAGE_SIZE = 4\r\n\r\nconst getDataByPage = (data, page) => {\r\n    const end = page * PAGE_SIZE\r\n    const start = end - PAGE_SIZE\r\n    return data.slice(start, end)\r\n}\r\n\r\nclass NewsFeed extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            dataDisplayed: [],\r\n            currentPage: 1,\r\n            totalPages: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/newsfeed`)\r\n            .then((response) => {\r\n                console.log(response)\r\n                return response.json()\r\n            })\r\n            .then((newData) => {\r\n                console.log(newData)\r\n                const newTotalPages = Math.ceil(newData.length / PAGE_SIZE)\r\n                this.setState({\r\n                    data: newData,\r\n                    totalPages: newTotalPages,\r\n                    dataDisplayed: getDataByPage(\r\n                        newData,\r\n                        this.state.currentPage\r\n                    )\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    toPage(goBack) {\r\n        const page = goBack\r\n            ? this.state.currentPage - 1\r\n            : this.state.currentPage + 1\r\n        const newData = getDataByPage(this.state.data, page)\r\n        this.setState({\r\n            dataDisplayed: newData,\r\n            currentPage: page\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>News Feed</h2>\r\n                <hr className=\"my-2\" style={{ borderColor: 'white' }}></hr>\r\n                <h4>\r\n                    Latest updates from the Australian Department of Health.\r\n                    Many of the articles are about the COVID-19 situation in\r\n                    Australia.\r\n                </h4>\r\n                {this.state.dataDisplayed.map((piece) => {\r\n                    return (\r\n                        <NewsItem\r\n                            key={piece.title}\r\n                            title={piece.title}\r\n                            description={piece.description}\r\n                            date={piece.pubDate[0]\r\n                                .split(' ')\r\n                                .slice(0, 4)\r\n                                .join(' ')}\r\n                            link={piece.guid[0]._}\r\n                        />\r\n                    )\r\n                })}\r\n\r\n                <div className=\"d-flex justify-content-center p-3\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        disabled={this.state.currentPage === 1}\r\n                        onClick={() => this.toPage(true)}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary ml-1\"\r\n                        disabled={\r\n                            this.state.currentPage === this.state.totalPages\r\n                        }\r\n                        onClick={() => this.toPage(false)}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewsFeed\r\n","import React, { Suspense } from 'react'\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\n\nimport './App.css'\nimport Home from './components/Home'\nimport Map from './components/Map'\nimport NavBar from './components/NavBar'\nimport { DataContext } from './contexts/DataContext'\nimport Loader from './components/Loader'\nimport NewsFeed from './components/NewsFeed'\n\n// lazy loading - downloaded on the fly\n// const Home = React.lazy(() => import('./components/Home'))\n// const NavBar = React.lazy(() => import('./components/NavBar'))\n// const Map = React.lazy(() => import('./components/Map'))\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <DataContext>\n                    <BrowserRouter>\n                        <Suspense\n                            fallback={\n                                <div>\n                                    <Loader />\n                                </div>\n                            }\n                        >\n                            <NavBar />\n                            <div className=\"container\">\n                                <Switch>\n                                    {/* stop when found a match */}\n                                    <Route path=\"/\" exact>\n                                        <Home />\n                                    </Route>\n                                    <Route path=\"/map\">\n                                        <Map />\n                                    </Route>\n                                    <Route path=\"/news\">\n                                        <NewsFeed />\n                                    </Route>\n                                    {/* fall back */}\n                                    <Redirect to=\"/\"></Redirect>\n                                </Switch>\n                            </div>\n                        </Suspense>\n                    </BrowserRouter>\n                </DataContext>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}